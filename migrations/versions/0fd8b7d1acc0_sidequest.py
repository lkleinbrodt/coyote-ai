"""sidequest

Revision ID: 0fd8b7d1acc0
Revises: 46ecb5a3d012
Create Date: 2025-08-30 17:36:54.008849

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0fd8b7d1acc0"
down_revision = "46ecb5a3d012"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE SCHEMA IF NOT EXISTS sidequest")
    op.create_table(
        "sidequest_generation_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "request_preferences",
            postgresql.JSON(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "context_data", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("quests_generated", sa.Integer(), nullable=False),
        sa.Column("model_used", sa.String(length=100), nullable=True),
        sa.Column("fallback_used", sa.Boolean(), nullable=False),
        sa.Column("generation_time_ms", sa.Integer(), nullable=True),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="sidequest",
    )
    op.create_table(
        "sidequest_quests",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column(
            "category",
            sa.Enum(
                "FITNESS",
                "SOCIAL",
                "MINDFULNESS",
                "CHORES",
                "HOBBIES",
                "OUTDOORS",
                "LEARNING",
                "CREATIVITY",
                name="questcategory",
            ),
            nullable=False,
        ),
        sa.Column("estimated_time", sa.String(length=50), nullable=False),
        sa.Column(
            "difficulty",
            sa.Enum("EASY", "MEDIUM", "HARD", name="questdifficulty"),
            nullable=False,
        ),
        sa.Column("tags", postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.Column("selected", sa.Boolean(), nullable=False),
        sa.Column("completed", sa.Boolean(), nullable=False),
        sa.Column("skipped", sa.Boolean(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column(
            "feedback_rating",
            sa.Enum("THUMBS_UP", "THUMBS_DOWN", name="questrating"),
            nullable=True,
        ),
        sa.Column("feedback_comment", sa.Text(), nullable=True),
        sa.Column("time_spent", sa.Integer(), nullable=True),
        sa.Column("generated_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("model_used", sa.String(length=100), nullable=True),
        sa.Column("fallback_used", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="sidequest",
    )
    op.create_table(
        "sidequest_users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("categories", postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "difficulty",
            sa.Enum("EASY", "MEDIUM", "HARD", name="questdifficulty"),
            nullable=False,
        ),
        sa.Column("max_time", sa.Integer(), nullable=False),
        sa.Column("include_completed", sa.Boolean(), nullable=False),
        sa.Column("include_skipped", sa.Boolean(), nullable=False),
        sa.Column("notifications_enabled", sa.Boolean(), nullable=False),
        sa.Column("notification_time", sa.Time(), nullable=False),
        sa.Column("timezone", sa.String(length=50), nullable=False),
        sa.Column("onboarding_completed", sa.Boolean(), nullable=False),
        sa.Column("last_quest_generation", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
        schema="sidequest",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("sidequest_users", schema="sidequest")
    op.drop_table("sidequest_quests", schema="sidequest")
    op.drop_table("sidequest_generation_logs", schema="sidequest")
    
    # Drop the enum types that were created
    op.execute("DROP TYPE IF EXISTS questcategory CASCADE")
    op.execute("DROP TYPE IF EXISTS questdifficulty CASCADE")
    op.execute("DROP TYPE IF EXISTS questrating CASCADE")
    
    op.execute("DROP SCHEMA IF EXISTS sidequest")
    # ### end Alembic commands ###
